import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * Author: Arshia Gupta (entire class)
 * It reads input from the user, performs color space conversions, and displays the result.
 */
public class ColorConverterDriver extends JPanel {

    private Color[][] colors; // To hold the colors read from the file
    private static int rows, cols, type;
    private static int[] first, second, third;
    public static ColorConverter myCConvert;

    /**
     * Constructs a ColorConverterDriver object with the given color array.
     *
     * @param cArr The 2D array of Color objects.
     */
    public ColorConverterDriver(Color[][] cArr) {
        colors = cArr;
    }

    /**
     * Paints rectangles based on the colors array.
     *
     * @param g The Graphics object used for painting.
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        for (int i = 0; i < colors.length; i++) {
            for (int j = 0; j < colors[i].length; j++) {
                Color cc = colors[i][j];
                g2d.setColor(new java.awt.Color(cc.getRed(), cc.getGreen(), cc.getBlue()));
                g2d.fillRect(j * 50, i * 50, 50, 50);
            }
        }
    }

    /**
     * The main method of the ColorConverterDriver class.
     *
     * @param args The command-line arguments.
     */
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        System.out.println("Enter # of rows: ");
        rows = scan.nextInt();
        System.out.println("Enter # of columns: ");
        cols = scan.nextInt();

        first = new int[rows * cols];
        second = new int[rows * cols];
        third = new int[rows * cols];

        System.out.println("Enter 1 for Type 1 to convert from RBG to HSV. "
                + "Enter 2 for Type 2 to convert from HSV to RGB");

        type = scan.nextInt();
        System.out.println("Enter the filename: ");
        String fileName = scan.next();

        // Read values from the file based on the conversion type
        if (type == 2) {
            try {
                Scanner fscan = new Scanner(new File(fileName));
                for (int i = 0; i < rows * cols; i++) {
                    if (fscan.hasNext()) {
                        int nextVal = fscan.nextInt();
                        if (nextVal >= 0 && nextVal <= 360)
                            first[i] = nextVal;
                        else {
                            System.out.println("Invalid hue: set to 0");
                            first[i] = 0;
                        }
                    }
                }

                // Read saturation values
                for (int i = 0; i < rows * cols; i++) {
                    if (fscan.hasNext()) {
                        int nextVal = fscan.nextInt();
                        if (nextVal >= 0 && nextVal <= 100)
                            second[i] = nextVal;
                        else {
                            System.out.println("Invalid saturation: set to 0");
                            second[i] = 0;
                        }
                    }
                }

                // Read brightness values
                for (int i = 0; i < rows * cols; i++) {
                    if (fscan.hasNext()) {
                        int nextVal = fscan.nextInt();
                        if (nextVal >= 0 && nextVal <= 100)
                            third[i] = nextVal;
                        else {
                            System.out.println("Invalid brightness: set to 0");
                            third[i] = 0;
                        }
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("Error in reading file. Try again.");
            }
        }

        // Perform RGB to HSV conversion
        if (type == 1) {
            try {
                Scanner fscan = new Scanner(new File(fileName));
                for (int i = 0; i < rows * cols; i++) {
                    if (fscan.hasNext()) {
                        int nextVal = fscan.nextInt();
                        if (nextVal >= 0 && nextVal <= 255)
                            first[i] = nextVal;
                        else {
                            System.out.println("Invalid red value, replacing it with 0");
                            first[i] = 0;
                        }
                    }
                }

                // Read green values
                for (int i = 0; i < rows * cols; i++) {
                    if (fscan.hasNext()) {
                        int nextVal = fscan.nextInt();
                        if (nextVal >= 0 && nextVal <= 255)
                            second[i] = nextVal;
                        else {
                            System.out.println("Invalid green value, replacing it with 0");
                            second[i] = 0;
                        }
                    }
                }

                // Read blue values
                for (int i = 0; i < rows * cols; i++) {
                    if (fscan.hasNext()) {
                        int nextVal = fscan.nextInt();
                        if (nextVal >= 0 && nextVal <= 255)
                            third[i] = nextVal;
                        else {
                            System.out.println("Invalid blue value, replacing it with 0");
                            third[i] = 0;
                        }
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("Error in reading file. Try again.");
            }
        }

        // Perform color space conversion
        ColorConverter colorConvert = new ColorConverter(rows, cols, type, first, second, third);
        Color[][] colorArr = new Color[rows][cols];
        if (type == 1) {
            colorArr = colorConvert.RGBtoHSV();
            System.out.println("Converted RGB to HSV: ");
        } else if (type == 2) {
            colorArr = colorConvert.HSVtoRGB();
            System.out.println("Converted HSV to RGB: ");
        }
        colorConvert.print();

        // Create an instance of ColorConverterDriver and pass colors to its constructor
        ColorConverterDriver driver = new ColorConverterDriver(colorArr);
        JFrame frame = new JFrame("Color Converter");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(driver); // Add ColorConverterDriver instance to the frame
        frame.setSize(260, 280);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
